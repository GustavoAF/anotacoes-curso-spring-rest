FORMAS DE PASSAR PARÂMETROS

1 - Ausencia de parâmetros - classe controladora RequestMappingSimplesSemParametros

 Ausência de Parâmetro
  Parâmetro não é um item obrigatório para um recurso, é possível desenvolver sem a necessidade de um alguma informação no request.
  Exemplos:

  1.1 - Retorno de Tipo Primitivo
  * Recurso não necessáriamente precisa receber um parâmetro, tanto por uri quanto no payload. Nesse exemplo temos um método extremamente simples que não recebe nenhum parâmetro de entrada e retorna um tipo String. O controlador esta anotado com @RestController o que possibilita o retorno identico ao que foi enviado. A diferença nesses casos é que a propriedade Content-Type do Header no response terá o valor text/plain, porque o tipo de retorno não foi informado, por isso o proprio spring sugere o tipo.

    @GetMapping ("/retornando-primitivo")
	public String getRetornoTipoPrimitivo() {
				
		return "Exemplo de Metodo Simples sem Recebimento de Parametro ";
	}
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1.2 - Retorno de tipo por referência (Json)
 * No exemplo abaixo, o request do verbo get continua sem receber parâmetros de entrada, mas diferente do caso acima, seu retorno não é um tipo primitivo e sim um tipo por referência. O que possibilita que o protocolo http entenda o conteúdo do request como um Json, fazendo com que o Content-Type do cabeçalho seja referenciado como application/json.

    @GetMapping("/retornando-json")
    public ResponseSimples getRetornoTipoJson() {
    	
    	responseSimples.setCodido(1);
    	responseSimples.setDescricao("Retorno Json");
    	
    	return responseSimples;
    }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1.3 - Retorno com ResponseEntity
 * Neste caso o recurso retorna um objeto de tipo por referência, como no exemplo acima, a diferença é que esse retorno é um tipo genérico chamado ResponseEntity, que possibilita manipular de forma mais completa o http retornado. ResponseEntity representa toda a resposta HTTP: código de status, cabeçalhos e corpo . Por isso, podemos usá-lo para configurar totalmente a resposta HTTP.
 Se quisermos usá-lo, temos que devolvê-lo do ponto final e o Spring cuida do resto. Como resultado, podemos usar qualquer tipo como corpo de resposta. Como especificamos o status da resposta programaticamente, podemos retornar com diferentes códigos de status para diferentes cenários. Além disso, podemos definir cabeçalhos HTTP, conforme definido no exemplo abaixo.

    @GetMapping("/retornando-json-com-responseEntity")
    public ResponseEntity<ResponseSimples> getRetornoTipoJsonComResponseEntity() {
    
    	responseSimples.setCodido(1);
    	responseSimples.setDescricao("Retorno Json");
    	
    	return ResponseEntity.status(HttpStatus.OK).body(responseSimples);
    }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1.4 - Retorno com ResponseEntity sem Tipo Definido
 * No exemplo abaixo, usamos o retorno com o objeto ResponseEntity, que nos permite manipular o protocolo http, fornecendo maior controle sobre a resposta ao cliente. Pelo fato desse objeto ser um collection, em tese você precisaria passar o tipo que sera transitado, mas o spring nós abstrai dessa exigencia, sendo possível informar que não sabemos o tipo usando a expressão <?>.
 
 @GetMapping("/retornando-json-com-responseEntity-sem-tipo")
 public ResponseEntity<?> getRetornoTipoJsonComResponseEntitySemTipo() {
    
    	responseSimples.setCodido(1);
    	responseSimples.setDescricao("Retorno Json");
    	
    	return ResponseEntity.status(HttpStatus.OK).body(responseSimples);
    }

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2 - Parâmetros passados na uri do recurso - classe controladora RequestMappingComParametrosNaUri

Parâmetros passados na uri
 Existem várias formas de receber parâmetros, uma delas é pela propria uri do recurso. Nesse caso devemos preparar o método
 para receber esses valores, mas para isso é necessário usar algumas anotações do spring.
 Exemplos:

2.1 - Parâmetro passado pela uri usando o caracter ?
* Umas das formas de receber parâmetros é usando a uri. Nesse caso é possivel informa-las bastanto usar o caracter "?" seguido do nome da variável e um igual (=), logo depois o valor que o parâmetro deve receber. Para esse tipo de request, é necessário usar a anotação @RequestParam do Spring, seguido do nome do parâmetro, feito isso, é necessário criar uma váriavel no metódo que irá receber o valor do parâmetro.

	@GetMapping("/request_param_simples")
	public String getComRequestParamSimples(@RequestParam("id") long id) {  

		return "Usando a anotacao RequestParam " + id; 
	}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.2 - Mais de um parâmetro passado pela uri usando o caracter ?	
* Como no exemplo acima, a passagem de parametros usando a anotação @RequestParam possibilita o envio de quantos parâmetros forem necessários. para isso basta reenviar as mesmas informações, separadas por vírgula.

	@GetMapping("/request_com2_param_simples")
	public String getComDoisRequestParamSimples(@RequestParam("id") long id, @RequestParam("id2") long id2) {  

		return "Usando a anotacao RequestParam, com 2 parâmetros. Primeiro: " + id  + " Segundo: "+ id2; 
	}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.3 - Parâmetro enviado fazendo parte da uri com @PathVariable	
* @PathVariable é a anotação que possibilita obter o valor passado como parâmetro na uri da chamada do serviço. Mas não como um parametro que é passado ápos o sinal de interrogação (?), e sim quando o valor faz parte da uri. Para utilizar, é necessário incluir o path do recurso seguido de barra (/)) e posteriormente o nome do parametro entre chaves ({}). Quando o nome do parametro interno for o mesmo do passado na anotação @GetMapping não será necesssário colocar o parametro na anotação @PathVariable, do contrario é necessário porque a variavel interna tem um nome diferente do parametro passado na uri.

	@GetMapping("/parametro-uri-path-variable/{idade}")
    public String getComGetMappingPathVariable(@PathVariable("idade") Integer parametro){

		return "Parametro passado na uri usando @PaathVariable. Valor " + parametro; 
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.4 - Mais de um parâmetro enviado fazendo parte da uri com @PathVariable
* @PathVariable é a anotação que possibilita obter o valor passado como parâmetro na uri da chamada do serviço. Mas não como um parametro que é passado ápos o sinal de interrogação (?), e sim quando o valor faz parte da uri. Para utilizar, é necessário incluir o path do recurso seguido de barra (/)) e posteriormente o nome do parametro entre chaves ({}). Caso seja necessário envar mais de um, basta incluir os parametros da mesma forma, separando por barra (/). Para cada parâmetro externo, é necessário incluir uma variável @PathVariable interna. Quando o nome do parametro interno for o mesmo do passado na anotação @GetMapping não será necesssário colocar o parametro na anotação @PathVariable, do contrario é necessário porque a variavel interna tem um nome diferente do parametro passado na uri.
	
	@GetMapping("/dois-parametro-uri-path-variable/{idade}/{idade2}")
    public String getComGetMappingDoisPathVariable(@PathVariable("idade") Integer parametro, @PathVariable("idade2") Integer parametro2){

		return "Parametro passado na uri usando @PaathVariable. Primeiro Valor " + parametro + " Segundo Valor " + parametro2;  
}
  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3 - Parâmetros passados no payload da requisição - classe controladora RequestMappingComParametrosNoPayload

Parâmetros passados no payload usando a anotação @RequestBody
Exemplos:

3.1 - Parâmetros passados no payload da requisição
*Também é possível receber informações no payload da requisição, para isso é necessário ter uma classe que sirva de modelo para receber as informações.Com essa estrutura montada, é necessário usar a anotação @RequestBody, informando o tipo do modelo criado.

	@GetMapping("/json-recebido-no-payload")
	public String getComParametrosNoPayload(@RequestBody PessoaInput input) {  

		return "Obtendo o paraetro recebido. Nome = " + input.getNome() + ", idade = " + input.getIdade();
	}
	
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.2 - Parâmetros passados no payload da requisição com retorno usando ResponseEntity	
*Conforme o exemplo acima, este recurso recebe informações no payload, mas retorna um ResponseEntity que possibilita manipular de forma precisa o protocolo HTTP.
	
	@GetMapping("/json-recebido-no-payload-usando-ResponseEntity")
	public ResponseEntity<ResponseSimples> getComParametrosNoPayloadeResponseEntity(@RequestBody PessoaInput input){
		
	    responseSimples.setCodido(1);
	    responseSimples.setDescricao("Nome: " + input.getNome() + " - Idade: " + input.getIdade() );
		
		return ResponseEntity.ok().body(responseSimples);

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


