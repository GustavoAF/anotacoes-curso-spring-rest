ANOTAÇÕES

@Component (Injetando Dependencias)
Essa anotação, é usada a nível de classe, sempre que usada o Spring irá definir o objeto como um Bean gerenciado por ele, e será instanciado no momento da compilação e suas dependencias controladas pelo mesmo.
Por exemplo se anotarmos nossa classe Cliente e Pessoa com @Component, em nenhum momento será necessário instanciar tais objetos. E a ordem de instanciação será respeitada de acordo com a necessidade.

@Bean (Injetando Dependencias)
As vezes precisamos gerenciar as dependencias no momento da execução da aplicação e não na hora da compilação, nesse caso podemos usar a anotação @Bean, que basicamente seria uma anotação de um método que retorna um objeto que a partir desse momento será gerenciado pelo Spring.
Nesses casos é obrigação do programador instanciar o objeto, pois só depois disso ele será gerenciado pelo framework.
Por exmplo, no construtor da nossa classe Pessoa, podemos chamar um método que retorna uma Classe cliente totalmente configurada passando valores aos seus atributos. Esse método pode ser anotado com @Bean.
Outra utilidade importante seria anotar os métodos de configuração da aplicação.

@Autowired (Injetando Dependencias Opcionais)
Pelo fato do Spring instanciar os objetos de forma automática, é evidente que algum construtor seja executado, e por default será o construtor padrão, ou seja aquele herdado da classe Object, aquele que não possui nenhum parâmetro. Mas ai surge a dúvida, e quando tivermos mais de um construtor em nossa classe? qual o framework vai saber que deve ser executado?  para isso temos a anotação @Autowired. Essa anotação informa qual o método deve ser executado no momento da instanciação do objeto.
Essa anotação pode ser usada em três momentos, no construtor na definição de algum atributo ou ate mesmo num método Seter.
Essa anotação também pode ser usada como responsável por informar ao spring que a Classe atual depende de outra, e por isso o framework deverá providenciar a instanciação desse objeto, todo controle dessa dependencia será feito pelo Spring e guardado no container.
Nessa anotação também é possivel informar a prioridade da instanciação, que por default é true, ou seja essa dependencia é obrigatória, caso seja informado false (@Autowired(required=false)) significa que a instancia não é obrigatoria, caso o spring nao consiga instanciar não será exibido um erro, mas o tratamento deve ser feito pelo programador.

@Controller (Controlador)
Associada com classes que possuem métodos que processam requests numa API. É usada em nível de classe é pelo fato dessa anotação tambem ser anotada pelo @Component, automaticamente a classe anotada com @Controller será gerenciada pelo container. 

@RequestMapping (Mapeando e organizando os recursos)
Esta anotação indica qual uri fará o mapeamento desse controlador, ou seja todas as requisições mapeadas com a palavra passada como parametro para essa anotação será direcionada para esse controlador.

@ResponseBody
Utilizada em métodos anotados com @RequestMapping para indicar que o retorno do método deve ser automaticamente escrito na resposta para o cliente. Muito comum quando queremos retornar JSON ou XML em função de algum objeto da aplicação.

@RestController (dois em um)
Esta anotação é um resumo de duas anotaçoes que seriam @Controller e @ResponseBody, onde o @Controller indica que é um controlador, utilizada para a camada de apresentação. Normalmente anotamos classes que representam a interação com o usuário, como managed beans, actions e controllers.
@ResponseBody significa que esta classe retorna informações e a resposta é exatamente o return do método. Usada para abreviar ou seja nao precisar usar duas anotações pode-se usar somente esta.

@GetMapping (Retorno esperado)
Esta anotação informa que requisições com o metodo Get chegaram nesse método, que é um verbo Get ou seja uma consulta.

@PostMapping
Esta anotação indica ao controledor que o verbo passado no HTTP, é referente a inserção de dados.

@PutMapping
A anotação @PutMapping indica ao controlador que o verbo passado no HTTP, é referente a uma alteração de registro. Nesse caso todo o registro será alterado com as informações do request. Por esse motivo, todos os campos devem ser informados.

@DeleteMapping 
Esta anotação indica ao controlador que o verbo passado no http, é referente a deleção de algum registro.

@PatchMapping
Esta anotação indica ao controlador que o verbo passado no HTTP, é referente a uma alteração de registro. Mas nesse caso somente os campos passados no body da requisição deve ser alterados. Por esse motivo só é necessário informar os campos que devem ser alterados, e não o objeto completo.

@Scope
Anotação utilizada para marcar o tempo de vida de um objeto gerenciado pelo container. Pode ser utilizada em classes anotadas com @Component, ou alguma de suas derivações. Além disso também pode ser usada em métodos anotados com @Bean. Quando você não utiliza nenhuma, o escopo default do objeto é o de aplicação, o que significa que vai existir apenas uma instância dele durante a execução do programa. Você pode alterar isso, anotando o local e usando alguma das constantes que existem na classe ConfigurableBeanFactory ou WebApplicationContext.

@Qualifier
Esta anotação, qualifica qual been deve ser injetado no momento do Autowired, devemos nomear o bean usando @Qualifier("urgente") por exemplo, e depois no nomento da instanciação do objeto acima da anotação @Autowired usamos o qualifier, para avisar ao spring que seria esse o bean que deve ser instanciado.

@Primary
Caso você tenha dois métodos anotados com @Bean e com ambos retornando o mesmo tipo de objeto, como o Spring vai saber qual dos dois injetar por default em algum ponto da sua aplicação? É para isso que serve a annotation @Primary. Indica qual é a opção padrão de injeção. Caso você não queira usar a padrão, pode recorrer a annotation @Qualifier.

@Configuration
É uma anotação que indica que determinada classe possui métodos que expõe novos beans. Geralmente é usado para classes que expõem algum objeto de configuração.

@Repository
Associada com classes que isolam o acesso aos dados da sua aplicação. Comumente associada ao pacote Repository.

@Service
Anotação associada com classes que representam a ideia do padrão Service do Domain Driven Design. Para ficar menos teórico pense em classes que representam algum fluxo de negócio da sua aplicação. Por exemplo, um fluxo de finalização de compra envolve atualizar manipular o carrinho, enviar email, processar pagamento etc. Este é o típico código que temos dificuldade de saber onde vamos colocar, em geral ele pode ficar num Service.

@Profile
Indica em qual profile tal bean deve ser carregado. Muito comum quando você tem classes que só devem ser carregadas em ambiente de dev ou de produção. 

@EnableAsync
Muitas vezes você precisa ações no sistema em background(outra thread). Essa anotação deve ser colocada em alguma classe marcada com @Configuration, para que o Spring habilite o suporte a execução assíncrona.

@Async
Uma vez que seu projeto habilitou o uso de execução de métodos assíncronos com a @EnableAsync, você pode marcar qualquer método de um bean gerenciado do projeto com essa annotation. Quando tal método for invocado, o Spring vai garantir que a execução dele será em outra thread.




 